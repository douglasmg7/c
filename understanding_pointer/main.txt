When a c programming is compiled, it works with three types of memory.
    Static / Global
    Automatic / Stack
    Dynamic / Heap

Static
    Statically declared variables inside functions are allocated to this type of memory.
    Global variables also use this region of memory.
    They are allocated when the program starts and remain in existence until the program finish.
    While all function have access to global variables, the scope of static variables is restricted to their defining function.

Automatic
    These variables are declared within function and are created when a function is called.
    Their scope is restricted to the function, and their lifetime is limited to the time the function is executing.
    
Dynamic
    Memory is allocated from the heap and can be released as necessary. A pointer references the allocated memory.
    The scope is limited to the pointer or pointers that refence the memory.
    It exists until it is released.


If a pointer is declared as Global or Static, it is initialized to NULL when the program starts.
int *globalpi;

void foo() {
    static int *staticpi;
}


The size of a pointer to a function can be different from the size of a pointer to data.


Predefined pointer-related types.
size_t
    To provide a safe type for sizes
ptrdiff_t
    To handle pointer arithmetic
intptr_t, uintptr_t
    To storing pointer addresses


size_t
    Represents the maximum size any object can be in C.
    It is a unsigned integer.
    Its purpose is to provide a portable means of declaring a size consistent with the addressable area of memory available on a system.
    The size_t is used as the return type for the "sizeof" operator and as the argument to many functions, including "malloc" and "strlen", among others.
    Use of size_t:
        Good practice
            Number of characters
            Array indexes
        Should
            Loop counters
            Indexing into arrays
        Sometimes
            Pointer arithmetic 
    For print size_t use:
        %zu
        %lu
        %u

The declaration of size_t is implementation specific, it can be found in stdio.h and stdlib.h.
Typically defined as follows:
#ifndef __SIZE_T
#define __SIZE_T
typedef unsigned int size_t;
#endif

Use sizeof operator to determine the size of a pointer:
printg("Size of *char: %d\n", sizeof(char*));

intptr_t and uintptr_t are used to for storing pointer addresses:
int num;
intptr_t *pi = &num;

Adding a integer to a pointer:
The amount added is the product of the integer times the number of bytes of the underlying data type.



        
    